name: 编译easytier

on:
  schedule:
    - cron: '0 3,20 * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: '请填写构建easytier的EasyTier/EasyTier分支或版本号，默认主分支main'
        required: true
        default: 'main'
      upx:
        description: '使用upx压缩二进制程序以最大化减少体积'
        required: true
        default: true
        type: boolean
      bj:
        description: '强制使用手动编译'
        required: true
        default: false
        type: boolean
      fb:
        description: '是否发布版本'
        required: true
        default: true
        type: boolean
      rel:
        description: '请选择发布版本'
        required: true
        type: choice
        default: 'release'
        options:
          - release
          - prerelease
      reltag:
        description: '自定义prerelease预发布的版本号'
        required: false
        default: ''

env:
  BRANCHES: "${{ github.event.inputs.tag }}"
  RELTAG: "${{ github.event.inputs.reltag }}"
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai
permissions:
  contents: write
  actions: write
jobs:
 check:
  runs-on: ubuntu-latest
  outputs:
    ver: ${{ steps.getversion.outputs.ver }}
    cver: ${{ steps.getversion.outputs.cver }}
  steps:
  - name: 检查更新
    id: getversion
    run: |
      ver=`curl https://api.github.com/repos/EasyTier/EasyTier/releases/latest | jq -r '.tag_name'`
      cver=`curl https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name'`
      echo "ver=${ver}" >> $GITHUB_OUTPUT
      echo "cver=${cver}" >> $GITHUB_OUTPUT
  -  name: 删除工作流
     uses: Mattraks/delete-workflow-runs@main
     with:
        token: ${{ secrets.GITHUB_TOKEN }}
        retain_days: 0
        keep_minimum_runs: 0
 build_web:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ github.event.inputs.bj == 'true' || (github.event.inputs.bj != 'true' && needs.check.outputs.ver != needs.check.outputs.cver) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'EasyTier/EasyTier'

      - uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: 打包静态页面
        run: |
          sed -i "s|'en'|'cn'|" easytier-web/frontend/src/App.vue
          sed -i "s/| 'en'/| 'cn'/g" easytier-web/frontend-lib/src/modules/i18n.ts
          sed -i "s|'en' ? 'cn' : 'en'|'cn' ? 'en' : 'cn'|g" easytier-web/frontend-lib/src/modules/i18n.ts
          
          pnpm -r install
          pnpm -r --filter "./easytier-web/*"  build

      - name: 上传静态页面
        uses: actions/upload-artifact@v4
        with:
          name: easytier-web-dashboard
          path: |
            easytier-web/frontend/dist/*
 build:
    needs: 
      - check
      - build_web
    if: ${{ github.event.inputs.bj == 'true' || (github.event.inputs.bj != 'true' && needs.check.outputs.ver != needs.check.outputs.cver) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: aarch64-unknown-linux-musl
            URL: aarch64-linux-musl
            NAME: aarch64-linux-musl
            
          - TARGET: mips-unknown-linux-musl
            URL: mips-linux-muslsf
            NAME: mips-linux-muslsf
            
          - TARGET: mipsel-unknown-linux-musl
            URL: mipsel-linux-muslsf
            NAME: mipsel-linux-muslsf
            
          - TARGET: arm-unknown-linux-musleabi
            URL: arm-linux-musleabi
            NAME: arm-linux-musleabi
            
          - TARGET: arm-unknown-linux-musleabihf
            URL: arm-linux-musleabihf
            NAME: arm-linux-musleabihf
            
          - TARGET: armv7-unknown-linux-musleabi
            URL: armv7m-linux-musleabi
            NAME: armv7-linux-musleabi

          - TARGET: armv7-unknown-linux-musleabihf
            URL: armv7l-linux-musleabihf
            NAME: armv7-linux-musleabihf
            
          - TARGET: i686-unknown-linux-musl
            URL: i686-linux-musl
            NAME: i686-linux-musl
            
          - TARGET: x86_64-unknown-linux-musl
            URL: x86_64-linux-musl
            NAME: x86_64-linux-musl
            
          #- TARGET: x86_64-unknown-freebsd
            #NAME: x86_64-freebsd
            
    runs-on: ubuntu-22.04
    env:
      TARGET: ${{ matrix.TARGET }}
      URL: ${{ matrix.URL }}
      NAME: ${{ matrix.NAME }}
    steps:
      - uses: actions/checkout@v4
      
      - name: 安装最新 Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 下载静态页面
        uses: actions/download-artifact@v4
        with:
          name: easytier-web-dashboard
          path: easytier-web/frontend/dist/
          
      - name: 下载编译工具
        if: ${{ matrix.TARGET != 'x86_64-unknown-freebsd' }}
        run: |
          mkdir -p /opt/musl_gcc
          rustup set auto-self-update disable
          rustup install 1.86
          rustup default 1.86
          MUSL_TARGET=$TARGET
          sudo apt-get update && sudo apt-get install -qq musl-tools libappindicator3-dev llvm clang
          if [[ $TARGET =~ ^mips.*$ || $TARGET =~ ^mipsel.*$ ]]; then
            MUSL_TARGET=${TARGET}sf
          fi
          wget -q --inet4-only -c https://github.com/cross-tools/musl-cross/releases/download/20250520/${MUSL_TARGET}.tar.xz -P /opt/musl_gcc/
          tar xf /opt/musl_gcc/${MUSL_TARGET}.tar.xz -C /opt/musl_gcc/
          sudo ln -sf /opt/musl_gcc/${MUSL_TARGET}/bin/*gcc /usr/bin/
          sudo ln -sf /opt/musl_gcc/${MUSL_TARGET}/include/ /usr/include/musl-cross
          sudo ln -sf /opt/musl_gcc/${MUSL_TARGET}/${MUSL_TARGET}/sysroot/ /opt/musl_gcc/sysroot
          sudo chmod -R a+rwx /opt/musl_gcc
          if [[ $TARGET =~ ^mips.*$ ]]; then
            cd "/opt/musl_gcc/${MUSL_TARGET}/lib/gcc/${MUSL_TARGET}/15.1.0" || exit 255
            cp libgcc_eh.a libunwind.a
            ar x libgcc.a _ctzsi2.o _clz.o _bswapsi2.o
            ar rcs libctz.a _ctzsi2.o _clz.o _bswapsi2.o

            rustup toolchain install nightly-x86_64-unknown-linux-gnu
            rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
            # https://github.com/rust-lang/rust/issues/128808
            # remove it after Cargo or rustc fix this.
            RUST_LIB_SRC=$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/
            if [[ -f $RUST_LIB_SRC/library/Cargo.lock && ! -f $RUST_LIB_SRC/Cargo.lock ]]; then 
               cp -f $RUST_LIB_SRC/library/Cargo.lock $RUST_LIB_SRC/Cargo.lock
            fi
          else
            rustup target add ${{ env.TARGET }}
          fi

      - name: 安装 UPX
        if: ${{ matrix.TARGET != 'x86_64-unknown-freebsd' }}
        uses: crazy-max/ghaction-upx@v3
        with:
          version: v4.2.4
          install-only: true
      - name: 编译
        if: ${{ matrix.TARGET != 'x86_64-unknown-freebsd' }}
        run: |
          tagg=${{ env.BRANCHES }}
          [[ -z $tagg ]] && tagg=main
          git clone -b $tagg https://github.com/EasyTier/EasyTier /opt/et
          cp -rf easytier-web/frontend/dist /opt/et/easytier-web/frontend/dist
          cd /opt/et
          rm -rf .cargo/config.toml
          #添加交叉编译配置
          cat >>.cargo/config.toml <<EOF
          [target.x86_64-unknown-linux-musl]
          linker = "/opt/musl_gcc/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static"]
          
          [target.i686-unknown-linux-musl]
          linker = "/opt/musl_gcc/i686-unknown-linux-musl/bin/i686-unknown-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static"] 
          
          [target.aarch64-unknown-linux-musl]
          linker = "/opt/musl_gcc/aarch64-unknown-linux-musl/bin/aarch64-unknown-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static"]
          
          [target.armv7-unknown-linux-musleabi]
          linker = "/opt/musl_gcc/armv7-unknown-linux-musleabi/bin/armv7-unknown-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static"]

          [target.armv7-unknown-linux-musleabihf]
          linker = "/opt/musl_gcc/armv7-unknown-linux-musleabihf/bin/armv7-unknown-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static"]
          
          [target.arm-unknown-linux-musleabi]
          linker = "/opt/musl_gcc/arm-unknown-linux-musleabi/bin/arm-unknown-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabi/arm-linux-musleabi/lib",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabi/arm-linux-unknown-musleabi/sysroot/usr/lib",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabi/lib/gcc/arm-unknown-linux-musleabi/15.1.0",
          "-l", "atomic",
          "-l", "gcc"]

          [target.arm-unknown-linux-musleabihf]
          linker = "/opt/musl_gcc/arm-unknown-linux-musleabihf/bin/arm-unknown-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabihf/arm-linux-musleabihf/lib",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabihf/arm-unknown-linux-musleabihf/sysroot/usr/lib",
          "-L", "/opt/musl_gcc/arm-unknown-linux-musleabihf/lib/gcc/arm-unknown-linux-musleabihf/15.1.0",
          "-l", "atomic",
          "-l", "gcc"]
          
          [target.mipsel-unknown-linux-musl]
          linker = "/opt/musl_gcc/mipsel-unknown-linux-muslsf/bin/mipsel-unknown-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static",
          "-L", "/opt/musl_gcc/mipsel-unknown-linux-muslsf/mipsel-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mipsel-unknown-linux-muslsf/mipsel-unknown-linux-muslsf/sysroot/usr/lib",
          "-L", "/opt/musl_gcc/mipsel-unknown-linux-muslsf/lib/gcc/mipsel-unknown-linux-muslsf/15.1.0",
          "-l", "atomic",
          "-l", "ctz",
          "-l", "gcc"]
          
          [target.mips-unknown-linux-musl]
          linker = "/opt/musl_gcc/mips-unknown-linux-muslsf/bin/mips-unknown-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static",
          "-L", "/opt/musl_gcc/mips-unknown-linux-muslsf/mips-unknown-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mips-unknown-linux-muslsf/mips-unknown-linux-muslsf/sysroot/usr/lib",
          "-L", "/opt/musl_gcc/mips-unknown-linux-muslsf/lib/gcc/mips-unknown-linux-muslsf/15.1.0",
          "-l", "atomic",
          "-l", "ctz",
          "-l", "gcc"]      
          EOF
          #改成只使用中文帮助信息
          sed -i 's/let locale = sys_locale::get_locale().unwrap_or_else(|| String::from("en-US"));/let locale = String::from("zh-CN");/' ./easytier/src/easytier-core.rs
          sed -i 's/rust_i18n::i18n!("locales", fallback = "en");/rust_i18n::i18n!("locales", fallback = "zh-CN");/' ./easytier/src/easytier-core.rs
          sed -i 's/rust_i18n::i18n!("locales", fallback = "en");/rust_i18n::i18n!("locales", fallback = "zh-CN");/' ./easytier/src/easytier-cli.rs
          sed -i 's/git_version::git_version/env/' ./easytier/src/common/constants.rs
          sed -i '/args = \["--abbrev=8", "--always", "--dirty=~"\],/d' ./easytier/src/common/constants.rs
          sed -i '/prefix = concat!(env!("CARGO_PKG_VERSION"), "-"),/d' ./easytier/src/common/constants.rs
          sed -i '/suffix = "",/d' ./easytier/src/common/constants.rs
          sed -i 's/fallback = env!("CARGO_PKG_VERSION")/"CARGO_PKG_VERSION"/' ./easytier/src/common/constants.rs

          sed -i 's/rust_i18n::i18n!("locales", fallback = "en");/rust_i18n::i18n!("locales", fallback = "zh-CN");/' ./easytier-web/src/main.rs
          sed -i 's/let locale = sys_locale::get_locale().unwrap_or_else(|| String::from("en-US"));/let locale = String::from("zh-CN");/' ./easytier-web/src/main.rs
          if [[ -d "/opt/musl_gcc/sysroot" ]]; then
            export BINDGEN_EXTRA_CLANG_ARGS=--sysroot=$(readlink -f /opt/musl_gcc/sysroot)
          fi
          if [[ $TARGET =~ ^mips.*$ ]]; then
             cargo +nightly build -r --target $TARGET -Z build-std=std,panic_abort --package=easytier-web --features=embed
             cargo +nightly build -r --target $TARGET -Z build-std=std,panic_abort --package=easytier
          else
            cargo build --release --target $TARGET --package=easytier-web --features=embed
            cargo build --release --target $TARGET --package=easytier
          fi
          MUSL_TARGET=$TARGET
          if [[ $TARGET =~ ^mips.*$ || $TARGET =~ ^mipsel.*$ ]]; then
            MUSL_TARGET=${TARGET}sf
          fi
          /opt/musl_gcc/${MUSL_TARGET}/bin/${MUSL_TARGET}-strip ./target/${{ env.TARGET }}/release/easytier-core
          /opt/musl_gcc/${MUSL_TARGET}/bin/${MUSL_TARGET}-strip ./target/${{ env.TARGET }}/release/easytier-cli
          /opt/musl_gcc/${MUSL_TARGET}/bin/${MUSL_TARGET}-strip ./target/${{ env.TARGET }}/release/easytier-web
          echo "build_time=$(TZ=UTC-8 date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
          if [[ ! -z "$RELTAG" ]] ; then
             echo "tags=$RELTAG" >> $GITHUB_ENV
          else
             echo "tags=${{ needs.check.outputs.ver }}" >> $GITHUB_ENV
          fi
      - name: 优化磁盘空间
        if: ${{ matrix.TARGET == 'x86_64-unknown-freebsd' }}
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"
      - name: 释放磁盘空间
        if: ${{ matrix.TARGET == 'x86_64-unknown-freebsd' }}
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 10240
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      - name: 下载静态页面
        uses: actions/download-artifact@v4
        with:
          name: easytier-web-dashboard
          path: easytier-web/frontend/dist/
      - name: 编译FreeBSD
        if: ${{ matrix.TARGET == 'x86_64-unknown-freebsd' }}
        uses: cross-platform-actions/action@v0.23.0
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.2'
          shell: bash
          memory: 5G
          cpu_count: 4
          run: |
              sudo pkg install -y git protobuf llvm-devel
              homedir=$(pwd)
              sudo mkdir -p /opt
              sudo chown -R $(whoami) /opt/
              sudo rm -rf /tmp/*
              tagg=${{ env.BRANCHES }}
              [[ -z $tagg ]] && tagg=main
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source $HOME/.cargo/env
              rustup set auto-self-update disable
              rustup install 1.86
              rustup default 1.86
              echo "编译版本：$tagg"
              git clone -b $tagg https://github.com/EasyTier/EasyTier /tmp/et
              ls
              cp -rf ./easytier-web/frontend/dist /tmp/et/easytier-web/frontend/dist
              cd /tmp/et
              #改成只使用中文帮助信息
              sed -i '' 's/let locale = sys_locale::get_locale().unwrap_or_else(|| String::from("en-US"));/let locale = String::from("zh-CN");/' easytier/src/easytier-core.rs
              sed -i '' 's/rust_i18n::i18n!("locales", fallback = "en");/rust_i18n::i18n!("locales", fallback = "zh-CN");/' ./easytier/src/easytier-core.rs
              sed -i '' 's/rust_i18n::i18n!("locales", fallback = "en");/rust_i18n::i18n!("locales", fallback = "zh-CN");/' ./easytier/src/easytier-cli.rs
              sed -i '' 's/git_version::git_version/env/' ./easytier/src/common/constants.rs
              sed -i '' '/args = \["--abbrev=8", "--always", "--dirty=~"\],/d' ./easytier/src/common/constants.rs
              sed -i '' '/prefix = concat!(env!("CARGO_PKG_VERSION"), "-"),/d' ./easytier/src/common/constants.rs
              sed -i '' '/suffix = "",/d' ./easytier/src/common/constants.rs
              sed -i '' 's/fallback = env!("CARGO_PKG_VERSION")/"CARGO_PKG_VERSION"/' ./easytier/src/common/constants.rs
              export CC=clang
              export CXX=clang++
              export CARGO_TERM_COLOR=always
              export RUSTFLAGS="-C opt-level=z -C target-cpu=native -C link-arg=-s"
              cargo build --release --target x86_64-unknown-freebsd --package=easytier
              mv -f target/${{ env.TARGET }}/release/easytier-core ${homedir}/easytier-core
              mv -f target/${{ env.TARGET }}/release/easytier-cli ${homedir}/easytier-cli
              cargo clean
              cargo build --release --target x86_64-unknown-freebsd --package=easytier-web --features=embed
              ${homedir}/easytier-core -h
              mv -f target/${{ env.TARGET }}/release/easytier-web ${homedir}/easytier-web/easytier-web
      - name: 压缩
        if: ${{ matrix.TARGET != 'x86_64-unknown-freebsd' && github.event.inputs.upx != 'false' }}
        run: |
          upx --lzma --best /opt/et/target/${{ env.TARGET }}/release/easytier-core
          upx --lzma --best /opt/et/target/${{ env.TARGET }}/release/easytier-cli
          upx --lzma --best /opt/et/target/${{ env.TARGET }}/release/easytier-web
      - name: 打包
        run: |
          if [[ $TARGET == 'x86_64-unknown-freebsd' ]]; then
          mkdir -p /opt/et/target/${{ env.TARGET }}/release
          mv -f ./easytier-core /opt/et/target/${{ env.TARGET }}/release/easytier-core
          mv -f ./easytier-cli /opt/et/target/${{ env.TARGET }}/release/easytier-cli
          mv -f ./easytier-web/easytier-web /opt/et/target/${{ env.TARGET }}/release/easytier-web
          echo "build_time=$(TZ=UTC-8 date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
          if [[ ! -z "$RELTAG" ]] ; then
             echo "tags=$RELTAG" >> $GITHUB_ENV
          else
             echo "tags=${{ needs.check.outputs.ver }}" >> $GITHUB_ENV
          fi
          fi
          mkdir -p /opt/bin
          cd /opt/et/target/${{ env.TARGET }}/release
          file easytier-core
          tar -czvf easytier-${{ env.NAME }}.tar.gz easytier-core easytier-cli easytier-web
          cp -f ./easytier-core /opt/bin/easytier-core
          cp -f ./easytier-cli /opt/bin/easytier-cli
          cp -f ./easytier-web /opt/bin/easytier-web
      - name: 上传
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: easytier-${{ env.NAME }}
          path: /opt/bin/*
      - name: 发布稳定版
        if: github.event.inputs.fb != 'false' && github.event.inputs.rel != 'prerelease'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
           > ### ![](https://img.shields.io/badge/%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4-${{ env.build_time }}-8267?logo=github&labelColor=%E9%A1%BB)![](https://img.shields.io/github/downloads/${{ github.repository }}/${{ needs.check.outputs.ver }}/total?label=%E4%B8%8B%E8%BD%BD%E6%AC%A1%E6%95%B0&logo=github)![](https://img.shields.io/docker/image-size/lmq8267/easytier/${{ needs.check.outputs.ver }}?label=%E9%95%9C%E5%83%8F%E5%A4%A7%E5%B0%8F&link=https%3A%2F%2Fhub.docker.com%2Fr%2Flmq8267%2Feasytier&logo=docker)
           
           其中 arm armv7 
           -musleabi：只支持软件浮点的设备
           -musleabihf：支持硬件浮点的设备
           
           [官方更新说明](https://github.com/EasyTier/EasyTier/releases)
           
          tag_name: ${{ needs.check.outputs.ver }}
          files: /opt/et/target/${{ env.TARGET }}/release/easytier-${{ env.NAME }}.tar.gz
      - name: 发布预发布版本
        if: github.event.inputs.fb == 'true' && github.event.inputs.rel == 'prerelease'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.c8 }}
          body: |
           > ### 编译时间 ：${{ env.build_time }}
           
           其中 arm armv7 
           -musleabi：只支持软件浮点的设备
           -musleabihf：支持硬件浮点的设备
           
           [官方更新说明](https://github.com/EasyTier/EasyTier/releases)
           
          tag_name: ${{ env.tags }}
          prerelease: true
          files: /opt/et/target/${{ env.TARGET }}/release/easytier-${{ env.NAME }}.tar.gz
 docker:
    needs: 
      - check 
      - build
    runs-on: ubuntu-latest
    steps:
      - name: 获取版本号
        run: |
          if [[ ! -z "$RELTAG" ]] ; then
             echo "tags=$RELTAG" >> $GITHUB_ENV
          else
             echo "tags=${{ needs.check.outputs.ver }}" >> $GITHUB_ENV
          fi
      - name: 打包镜像
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: docker.yml
          inputs: '{ "tag": "${{ env.tags }}", "latest": true , "rel": true}'

 keepalive-workflow:
    # github超过60天未提交将自动停止工作流
    name: 工作流保活 
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      #- uses: gautamkrishnar/keepalive-workflow@v2
        #with:
          #use_api: true
      - name: 检查上次提交日期
        id: check_commit_date
        run: |
          # 获取上次提交日期（格式：YYYY-MM-DD）
          LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=short)
          echo "上次提交日期: $LAST_COMMIT_DATE"
          # 计算当前日期和上次提交日期的差值（单位：天）
          LAST_COMMIT_TIMESTAMP=$(date -d "$LAST_COMMIT_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          DIFF_DAYS=$(( (CURRENT_TIMESTAMP - LAST_COMMIT_TIMESTAMP) / 86400 ))
          echo "距离上次提交以来的天数: $DIFF_DAYS"
          echo "diff_days=$DIFF_DAYS" >> $GITHUB_ENV
      - name: 执行空提交
        if: ${{ env.diff_days > 50 }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # 创建空提交
          git commit --allow-empty -m "自动空提交，保持仓库活跃"
          git push
