name: 打包docker镜像

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '请填写打包镜像的版本号，在github-Releases页面查看已发布的版本号'
        required: true
        default: ''
      latest:
        description: '是否打包成最新latest镜像'
        required: true
        default: true
        type: boolean
      rel:
        description: '是否发布离线镜像包'
        required: true
        default: true
        type: boolean

env:
  tags: "${{ github.event.inputs.tag }}"
permissions:
  contents: write
  actions: write
  packages: write  # 允许写入 GitHub Container Registry (GHCR)
jobs:
 build:
    runs-on: ubuntu-latest
    steps:
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21' # 使用的 Node.js 版本，可调整
      - name: 安装pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      - name: 构建 HTML
        run: |
          git clone https://github.com/EasyTier/EasyTier /opt/et
          cd /opt/et
          pnpm -r install
          pnpm -r build
          cp -rf /opt/et/easytier-web/frontend/dist /opt/dist
      - name: 下载程序
        run: |
          cd /opt
          
          curl -o /opt/easytier.tar.gz -L https://github.com/${{ github.repository }}/releases/download/$tags/easytier-aarch64-linux-musl.tar.gz
          tar -xzvf /opt/easytier.tar.gz -C /opt/
          rm -rf easytier.tar.gz
          mv -f easytier-core easytier-core_arm64
          mv -f easytier-cli easytier-cli_arm64
          mv -f easytier-web easytier-web_arm64

          curl -o /opt/easytier.tar.gz -L https://github.com/${{ github.repository }}/releases/download/$tags/easytier-x86_64-linux-musl.tar.gz
          tar -xzvf /opt/easytier.tar.gz -C /opt/
          rm -rf easytier.tar.gz
          mv -f easytier-core easytier-core_amd64
          mv -f easytier-cli easytier-cli_amd64
          mv -f easytier-web easytier-web_amd64

          curl -o /opt/easytier.tar.gz -L https://github.com/${{ github.repository }}/releases/download/$tags/easytier-i686-linux-musl.tar.gz
          tar -xzvf /opt/easytier.tar.gz -C /opt/
          rm -rf easytier.tar.gz
          mv -f easytier-core easytier-core_386
          mv -f easytier-cli easytier-cli_386
          mv -f easytier-web easytier-web_386

          curl -o /opt/easytier.tar.gz -L https://github.com/${{ github.repository }}/releases/download/$tags/easytier-armv7-linux-musleabi.tar.gz
          tar -xzvf /opt/easytier.tar.gz -C /opt/
          rm -rf easytier.tar.gz
          mv -f easytier-core easytier-core_armv7
          mv -f easytier-cli easytier-cli_armv7
          mv -f easytier-web easytier-web_armv7

          curl -o /opt/easytier.tar.gz -L https://github.com/${{ github.repository }}/releases/download/$tags/easytier-arm-linux-musleabi.tar.gz
          tar -xzvf /opt/easytier.tar.gz -C /opt/
          rm -rf easytier.tar.gz
          mv -f easytier-core easytier-core_armv6
          mv -f easytier-cli easytier-cli_armv6
          mv -f easytier-web easytier-web_armv6

          # 创建 Dockerfile
          echo "FROM alpine:latest" > ./Dockerfile
          echo "ARG TARGETARCH" >> ./Dockerfile
          echo "ARG TARGETVARIANT" >> ./Dockerfile
          echo "RUN apk add --no-cache tzdata caddy" >> ./Dockerfile
          echo "RUN mkdir -p /app" >> ./Dockerfile
          echo "COPY dist /usr/bin/dist" >> ./Dockerfile
          echo "ADD easytier-core_\$TARGETARCH\$TARGETVARIANT /usr/bin/easytier-core" >> ./Dockerfile
          echo "ADD easytier-cli_\$TARGETARCH\$TARGETVARIANT /usr/bin/easytier-cli" >> ./Dockerfile
          echo "ADD easytier-web_\$TARGETARCH\$TARGETVARIANT /usr/bin/easytier-web" >> ./Dockerfile 
          echo "RUN chmod +x /usr/bin/easytier-core" >> ./Dockerfile
          echo "RUN chmod +x /usr/bin/easytier-cli" >> ./Dockerfile
          echo "RUN chmod +x /usr/bin/easytier-web" >> ./Dockerfile
          echo "ENV TZ Asia/Shanghai" >> ./Dockerfile
          echo "ENV LANG=zh_CN" >> ./Dockerfile

          # 生成 easytier.sh 脚本
          echo "RUN echo '#!/bin/sh' > /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '# 说明: 根据环境变量 WEB 的值决定运行的程序' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '# 如果 WEB=1，则运行 /usr/bin/easytier-web' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '# 否则默认运行 /usr/bin/easytier-core' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'APP_EXEC=\"/usr/bin/easytier-core\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '# 判断环境变量 WEB 的值' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'if [ \"\$WEB\" = \"1\" ]; then' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '  echo \"Docker环境变量 WEB=1 已设置，运行 /usr/bin/easytier-web\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo ' caddy file-server --listen :8080 --root /app/dist &' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '  echo \"运行caddy 静态网页， 请映射8080端口\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'cd /app' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'cp -rf /usr/bin/easytier-web /app/easytier-web' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'cp -rf /usr/bin/dist /app/dist' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'exec ./easytier-web \"\$@\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'else' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '  echo \"Docker环境变量 WEB=1 未设置，默认运行 /usr/bin/easytier-core\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'exec \"\$APP_EXEC\" \"\$@\"' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo 'fi' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN echo '' >> /usr/bin/easytier.sh" >> ./Dockerfile
          echo "RUN chmod +x /usr/bin/easytier.sh" >> ./Dockerfile

          # 设置 ENTRYPOINT
          echo "EXPOSE 11010/tcp" >> ./Dockerfile
          echo "EXPOSE 11010/udp" >> ./Dockerfile
          echo "EXPOSE 11011/udp" >> ./Dockerfile
          echo "EXPOSE 11011/tcp" >> ./Dockerfile
          echo "EXPOSE 11012/tcp" >> ./Dockerfile
          echo "EXPOSE 22020/udp" >> ./Dockerfile
          echo "EXPOSE 11211/tcp" >> ./Dockerfile
          echo "EXPOSE 8080/tcp" >> ./Dockerfile
          echo "VOLUME /app" >> ./Dockerfile
          echo "ENTRYPOINT [\"/usr/bin/easytier.sh\"]" >> ./Dockerfile
          
      - name: Setup QEMU
        uses: dbhi/qus/action@main
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: github.repository_owner == 'lmq8267' # 判断仓库所有者是否是 lmq8267 才执行
        uses: docker/login-action@v3
        with:
         username: lmq8267
         password: ${{ secrets.DOCKER_TOKEN }}
      - name: login github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Latest Image
        if: github.event.inputs.latest == 'true' && github.repository_owner == 'lmq8267' # 判断仓库所有者是否是 lmq8267 才执行
        uses: docker/build-push-action@v5
        with:
         push: true
         tags: |
          docker.io/lmq8267/easytier:${{ env.tags }}
          docker.io/lmq8267/easytier:latest
          ghcr.io/${{ github.actor }}/easytier:${{ env.tags }}
          ghcr.io/${{ github.actor }}/easytier:latest
         platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6
         context: /opt
      - name: Build and Push Docker Image
        if: github.event.inputs.latest == 'false' && github.repository_owner == 'lmq8267' # 判断仓库所有者是否是 lmq8267 才执行
        uses: docker/build-push-action@v5
        with:
         push: true
         tags: |
          docker.io/lmq8267/easytier:${{ env.tags }}
          ghcr.io/${{ github.actor }}/easytier:${{ env.tags }}
         platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6
         context: /opt
      - name: Save Docker Image
        if: github.event.inputs.rel == 'true'
        run: |
          mkdir -p /opt/dk
          docker pull --platform linux/amd64 lmq8267/easytier:${{ env.tags }}
          docker save -o /opt/dk/easytier-x86_64-docker.tar lmq8267/easytier:${{ env.tags }}

          docker pull --platform linux/386 lmq8267/easytier:${{ env.tags }}
          docker save -o /opt/dk/easytier-386-docker.tar lmq8267/easytier:${{ env.tags }}

          docker pull --platform linux/arm64 lmq8267/easytier:${{ env.tags }}
          docker save -o /opt/dk/easytier-arm64-docker.tar lmq8267/easytier:${{ env.tags }}

          docker pull --platform linux/arm/v7 lmq8267/easytier:${{ env.tags }}
          docker save -o /opt/dk/easytier-armv7-docker.tar lmq8267/easytier:${{ env.tags }}

          docker pull --platform linux/arm/v6 lmq8267/easytier:${{ env.tags }}
          docker save -o /opt/dk/easytier-armv5-docker.tar lmq8267/easytier:${{ env.tags }}
          echo "build_time=$(TZ=UTC-8 date +%Y-%m-%d' '%H:%M:%S)" >> $GITHUB_ENV
      - name: release
        if: github.event.inputs.rel == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
           > ### 编译时间 ：${{ env.build_time }}
           
           其中 arm armv7 
           -musleabi：只支持软件浮点的设备
           -musleabihf：支持硬件浮点的设备
           -docker.tar  docker离线镜像包
           
           [官方更新说明](https://github.com/EasyTier/EasyTier/releases)
           
          tag_name: ${{ env.tags }}
          files: /opt/dk/*

 scp:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 更新服务器
        if: github.repository_owner == 'lmq8267' # 判断仓库所有者是否是 lmq8267 才执行
        env:
          #读取帐号密码的环境变量
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          USER: ${{ secrets.SERVER }}
          CMD: ${{ secrets.CMD }}
        run: |
          #远程ssh执行更新命令
          sudo apt-get install -y sshpass
          sshpass -p "${{ secrets.SSH_PRIVATE_KEY }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${{ secrets.SERVER }}" "${{ secrets.CMD }}"
